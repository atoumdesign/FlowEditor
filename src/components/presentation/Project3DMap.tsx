import React, { useMemo, useState } from "react";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Html } from "@react-three/drei";
import * as THREE from "three";

// Função utilitária para obter SVG do node
function getNodeSVG(node: any): string | undefined {
  // SVGs fixos para tipos específicos
  if (node?.type === "lambdaFunction") {
    return `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
        <g id="Icon-Resource/Compute/Res_AWS-Lambda_Lambda-Function_48" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
          <path d="M24,44 C12.972,44 4,35.028 4,24 C4,12.972 12.972,4 24,4 C35.028,4 44,12.972 44,24 C44,35.028 35.028,44 24,44 L24,44 Z M24,2 C11.869,2 2,11.869 2,24 C2,36.131 11.869,46 24,46 C36.131,46 46,36.131 46,24 C46,11.869 36.131,2 24,2 L24,2 Z M17.231,35.25 L11.876,35.25 L18.221,21.959 L20.902,27.492 L17.231,35.25 Z M19.114,19.215 C18.946,18.87 18.597,18.651 18.214,18.651 L18.211,18.651 C17.826,18.652 17.477,18.874 17.312,19.221 L9.389,35.819 C9.24,36.129 9.262,36.493 9.445,36.783 C9.628,37.074 9.947,37.25 10.291,37.25 L17.864,37.25 C18.251,37.25 18.603,37.027 18.769,36.678 L22.915,27.915 C23.044,27.642 23.043,27.323 22.911,27.051 L19.114,19.215 Z M36.125,35.25 L30.673,35.25 L20.761,13.953 C20.597,13.601 20.243,13.375 19.854,13.375 L16.251,13.375 L16.255,9.25 L23.475,9.25 L33.339,30.545 C33.503,30.898 33.856,31.125 34.246,31.125 L36.125,31.125 L36.125,35.25 Z M37.125,29.125 L34.885,29.125 L25.021,7.83 C24.856,7.477 24.503,7.25 24.113,7.25 L15.256,7.25 C14.704,7.25 14.257,7.697 14.256,8.249 L14.25,14.374 C14.25,14.64 14.355,14.894 14.543,15.082 C14.73,15.27 14.984,15.375 15.25,15.375 L19.217,15.375 L29.129,36.672 C29.293,37.024 29.646,37.25 30.035,37.25 L37.125,37.25 C37.678,37.25 38.125,36.803 38.125,36.25 L38.125,30.125 C38.125,29.572 37.678,29.125 37.125,29.125 L37.125,29.125 Z" id="Amazon-Lambda-Lambda-Function_Resource-Icon_light-bg" fill="#ED7100"/>
        </g>
      </svg>
    `;
  }
  if (node?.type === "instance") {
    return `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
        <g id="Icon-Resource/Compute/Res_Amazon-EC2_Instance_48" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
          <path d="M9,39 L39,39 L39,9 L9,9 L9,39 Z M46,13 L46,11 L41,11 L41,8 C41,7.448 40.552,7 40,7 L37,7 L37,2 L35,2 L35,7 L31,7 L31,2 L29,2 L29,7 L25,7 L25,2 L23,2 L23,7 L19,7 L19,2 L17,2 L17,7 L13,7 L13,2 L11,2 L11,7 L8,7 C7.447,7 7,7.448 7,8 L7,11 L2,11 L2,13 L7,13 L7,17 L2,17 L2,19 L7,19 L7,23 L2,23 L2,25 L7,25 L7,29 L2,29 L2,31 L7,31 L7,35 L2,35 L2,37 L7,37 L7,40 C7,40.553 7.447,41 8,41 L11,41 L11,46 L13,46 L13,41 L17,41 L17,46 L19,46 L19,41 L23,41 L23,46 L25,46 L25,41 L29,41 L29,46 L31,46 L31,41 L35,41 L35,46 L37,46 L37,41 L40,41 C40.552,41 41,40.553 41,40 L41,37 L46,37 L46,35 L41,35 L41,31 L46,31 L46,29 L41,29 L41,25 L46,25 L46,23 L41,23 L41,19 L46,19 L46,17 L41,17 L41,13 L46,13 Z" id="Amazon-EC2-Instance_Resource-Icon_light-bg" fill="#ED7100"/>
        </g>
      </svg>
    `;
  }
  if (node?.type === "bucket" || node?.type === "s3") {
    return `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
      <g id="Icon-Resource/Storage/Res_Amazon-Simple-Storage-Service_Bucket_48" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
        <path d="M40.5038,26.1601 L40.7278,24.4941 C42.5118,25.5811 43.0628,26.2091 43.2228,26.4741 C42.7498,26.6171 41.7948,26.4911 40.5038,26.1601 L40.5038,26.1601 Z M22.8018,20.1111 C22.8018,20.0581 22.8448,20.0151 22.8978,20.0151 C22.9128,20.0151 22.9238,20.0251 22.9368,20.0321 L22.8638,20.1791 C22.8308,20.1691 22.8018,20.1491 22.8018,20.1111 L22.8018,20.1111 Z M36.5138,40.7981 C36.5078,40.8431 36.5048,40.8871 36.5048,40.9311 C36.5048,41.0861 36.1258,41.6751 34.4408,42.3401 C33.6898,42.6371 32.8028,42.9031 31.8028,43.1331 C29.2278,43.7291 26.0638,44.0571 22.8958,44.0571 C14.4298,44.0571 9.2888,41.8871 9.2888,40.9311 C9.2888,40.8871 9.2858,40.8431 9.2798,40.7981 L5.4408,12.2851 C5.6878,12.4291 5.9528,12.5661 6.2308,12.7001 C6.3098,12.7381 6.3958,12.7741 6.4778,12.8121 C6.7178,12.9231 6.9668,13.0301 7.2268,13.1341 C7.3388,13.1781 7.4518,13.2221 7.5668,13.2651 C7.8428,13.3691 8.1278,13.4691 8.4228,13.5651 C8.5098,13.5941 8.5928,13.6241 8.6808,13.6511 C9.0598,13.7701 9.4528,13.8841 9.8578,13.9911 C9.9708,14.0211 10.0878,14.0501 10.2028,14.0781 C10.5148,14.1581 10.8328,14.2341 11.1578,14.3061 C11.2988,14.3381 11.4388,14.3691 11.5808,14.3981 C11.9458,14.4751 12.3188,14.5491 12.6978,14.6181 C12.7798,14.6331 12.8588,14.6491 12.9418,14.6641 C13.3998,14.7441 13.8688,14.8181 14.3448,14.8881 C14.4788,14.9071 14.6148,14.9241 14.7508,14.9421 C15.1108,14.9921 15.4758,15.0381 15.8438,15.0811 C15.9938,15.0981 16.1448,15.1161 16.2968,15.1331 C16.7408,15.1801 17.1888,15.2231 17.6398,15.2621 C17.6928,15.2661 17.7468,15.2721 17.8018,15.2761 C18.3058,15.3171 18.8128,15.3501 19.3208,15.3801 C19.4658,15.3881 19.6108,15.3941 19.7568,15.4011 C20.1408,15.4201 20.5248,15.4351 20.9088,15.4481 C21.0598,15.4531 21.2088,15.4581 21.3588,15.4621 C21.8718,15.4731 22.3848,15.4821 22.8958,15.4821 C23.4058,15.4821 23.9188,15.4731 24.4318,15.4621 C24.5818,15.4581 24.7328,15.4531 24.8828,15.4481 C25.2678,15.4351 25.6508,15.4201 26.0338,15.4011 C26.1808,15.3941 26.3258,15.3881 26.4718,15.3801 C26.9808,15.3501 27.4868,15.3171 27.9898,15.2761 C28.0458,15.2711 28.1008,15.2651 28.1558,15.2621 C28.6068,15.2231 29.0518,15.1801 29.4938,15.1331 C29.6478,15.1161 29.7988,15.0981 29.9508,15.0811 C30.3168,15.0381 30.6808,14.9921 31.0398,14.9431 C31.1768,14.9251 31.3148,14.9071 31.4498,14.8871 C31.9248,14.8181 32.3928,14.7441 32.8518,14.6641 C32.9348,14.6491 33.0158,14.6331 33.0988,14.6171 C33.4768,14.5491 33.8478,14.4751 34.2128,14.3981 C34.3558,14.3691 34.4948,14.3381 34.6358,14.3061 C34.9608,14.2331 35.2788,14.1571 35.5918,14.0781 C35.7058,14.0491 35.8228,14.0211 35.9358,13.9921 C36.3418,13.8841 36.7348,13.7701 37.1138,13.6511 C37.2008,13.6241 37.2828,13.5951 37.3678,13.5661 C37.6648,13.4701 37.9518,13.3691 38.2298,13.2641 C38.3428,13.2221 38.4548,13.1791 38.5658,13.1351 C38.8278,13.0301 39.0788,12.9221 39.3218,12.8101 C39.4008,12.7731 39.4848,12.7381 39.5628,12.7011 C39.8408,12.5671 40.1068,12.4291 40.3538,12.2851 L38.5618,25.5911 C34.9248,24.4241 29.8168,22.3071 24.9818,20.0081 C24.9268,18.9011 24.0178,18.0151 22.8978,18.0151 C21.7418,18.0151 20.8018,18.9561 20.8018,20.1111 C20.8018,21.2661 21.7418,22.2061 22.8978,22.2061 C23.3518,22.2061 23.7698,22.0571 24.1128,21.8101 C28.4448,23.8891 33.9758,26.3421 38.2928,27.5881 L36.5138,40.7981 Z M22.8958,4.0001 C33.3148,4.0001 40.6558,7.2281 40.7918,9.0211 L40.7658,9.2291 C40.7478,9.2911 40.7088,9.3541 40.6758,9.4181 C40.6488,9.4701 40.6288,9.5201 40.5918,9.5731 C40.5478,9.6351 40.4828,9.6981 40.4258,9.7611 C40.3748,9.8161 40.3318,9.8711 40.2708,9.9271 C40.2028,9.9881 40.1158,10.0511 40.0348,10.1131 C39.9598,10.1711 39.8938,10.2281 39.8078,10.2871 C39.7168,10.3471 39.6078,10.4091 39.5058,10.4711 C39.4068,10.5301 39.3158,10.5901 39.2048,10.6491 C39.0948,10.7091 38.9658,10.7671 38.8448,10.8271 C38.7208,10.8881 38.6048,10.9481 38.4688,11.0091 C38.3398,11.0661 38.1928,11.1231 38.0548,11.1801 C37.9048,11.2401 37.7638,11.3021 37.6038,11.3611 C37.4558,11.4171 37.2898,11.4711 37.1328,11.5251 C36.9618,11.5841 36.7978,11.6441 36.6158,11.7021 C36.4468,11.7561 36.2608,11.8061 36.0818,11.8591 C35.8918,11.9151 35.7088,11.9721 35.5088,12.0261 C35.3168,12.0781 35.1098,12.1261 34.9098,12.1761 C34.7028,12.2271 34.5028,12.2801 34.2858,12.3301 C34.0698,12.3791 33.8378,12.4241 33.6118,12.4711 C33.3938,12.5161 33.1818,12.5641 32.9538,12.6071 C32.7138,12.6531 32.4568,12.6941 32.2068,12.7371 C31.9768,12.7761 31.7538,12.8181 31.5148,12.8551 C31.2548,12.8951 30.9788,12.9311 30.7088,12.9681 C30.4648,13.0011 30.2268,13.0381 29.9748,13.0681 C29.6818,13.1041 29.3728,13.1341 29.0698,13.1651 C28.8258,13.1911 28.5898,13.2201 28.3398,13.2421 C28.0038,13.2731 27.6518,13.2961 27.3058,13.3201 C27.0728,13.3381 26.8478,13.3581 26.6098,13.3731 C26.2308,13.3951 25.8338,13.4091 25.4408,13.4261 C25.2248,13.4341 25.0148,13.4471 24.7938,13.4541 C24.1748,13.4721 23.5418,13.4821 22.8958,13.4821 C22.2498,13.4821 21.6168,13.4721 20.9968,13.4541 C20.7748,13.4471 20.5628,13.4331 20.3428,13.4251 C19.9528,13.4091 19.5598,13.3951 19.1818,13.3731 C18.9318,13.3571 18.6938,13.3361 18.4488,13.3181 C18.1158,13.2941 17.7758,13.2721 17.4528,13.2421 C17.2018,13.2201 16.9658,13.1901 16.7208,13.1651 C16.4178,13.1341 16.1088,13.1041 15.8168,13.0681 C15.5668,13.0381 15.3298,13.0021 15.0868,12.9681 C14.8168,12.9311 14.5388,12.8961 14.2778,12.8551 C14.0298,12.8171 13.7978,12.7731 13.5588,12.7321 C13.3178,12.6901 13.0708,12.6511 12.8398,12.6071 C12.6078,12.5631 12.3928,12.5151 12.1688,12.4691 C11.9468,12.4221 11.7188,12.3781 11.5058,12.3291 C11.2898,12.2801 11.0908,12.2271 10.8838,12.1761 C10.6838,12.1261 10.4758,12.0781 10.2848,12.0261 C10.0818,11.9721 9.8968,11.9141 9.7038,11.8571 C9.5278,11.8061 9.3448,11.7551 9.1778,11.7021 C8.9928,11.6431 8.8268,11.5831 8.6538,11.5221 C8.4988,11.4691 8.3358,11.4161 8.1908,11.3611 C8.0288,11.3021 7.8878,11.2391 7.7378,11.1791 C7.5998,11.1221 7.4528,11.0651 7.3248,11.0091 C7.1908,10.9481 7.0738,10.8881 6.9498,10.8271 C6.8288,10.7671 6.6988,10.7091 6.5888,10.6481 C6.4788,10.5891 6.3868,10.5291 6.2868,10.4691 C6.1858,10.4081 6.0768,10.3471 5.9868,10.2871 C5.8998,10.2271 5.8318,10.1691 5.7558,10.1101 C5.6768,10.0491 5.5908,9.9871 5.5248,9.9271 C5.4618,9.8701 5.4178,9.8131 5.3658,9.7581 C5.3098,9.6961 5.2468,9.6341 5.2028,9.5731 C5.1648,9.5191 5.1458,9.4671 5.1178,9.4131 C5.0858,9.3511 5.0468,9.2891 5.0298,9.2291 L5.0018,9.0201 C5.1408,7.2271 12.4798,4.0001 22.8958,4.0001 L22.8958,4.0001 Z M45.2548,26.2571 C45.0418,25.1071 43.7168,23.8891 41.0178,22.3471 L42.7338,9.5951 L42.7338,9.5911 L42.7338,9.5901 L42.7848,9.2001 C42.7908,9.1571 42.7938,9.1141 42.7938,9.0711 C42.7938,4.9041 32.3078,2.0001 22.8958,2.0001 C13.4848,2.0001 2.9998,4.9041 2.9998,9.0711 C2.9998,9.1151 3.0028,9.1591 3.0088,9.2031 L3.0608,9.5931 L3.0608,9.5951 L7.2898,41.0091 C7.4208,44.6851 16.9028,46.0571 22.8958,46.0571 C26.2108,46.0571 29.5338,45.7111 32.2528,45.0821 C33.3478,44.8301 34.3308,44.5331 35.1748,44.2001 C37.3408,43.3451 38.4598,42.2711 38.5038,41.0091 L40.2448,28.0801 C41.1968,28.2821 42.0618,28.4051 42.7808,28.4051 C43.7498,28.4051 44.4748,28.2001 44.8668,27.7321 C45.2168,27.3161 45.3548,26.7921 45.2548,26.2571 L45.2548,26.2571 Z" id="AWS-Amazon-Simple-Storage_Bucket_Resource-Icon_light-bg" fill="#7AA116"/>
    </g>
    </svg>
    `;
  }
  if (node?.type === "mariaDBInstance") {
    return `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
      <g id="Icon-Resource/Database/Res_Amazon-Aurora-MariaDB-Instance_48" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <path d="M40.3469,13.5147 C40.3469,13.1517 40.2659,12.8707 40.1019,12.6757 C39.9389,12.4787 39.7029,12.3807 39.3989,12.3807 L38.6139,12.3807 L38.6139,14.6267 L39.4859,14.6267 C39.7609,14.6267 39.9739,14.5327 40.1239,14.3427 C40.2729,14.1547 40.3469,13.8777 40.3469,13.5147 L40.3469,13.5147 Z M38.6139,11.3457 L39.2249,11.3457 C39.4789,11.3457 39.6779,11.2537 39.8249,11.0727 C39.9689,10.8917 40.0419,10.6367 40.0419,10.3097 C40.0419,9.9757 39.9779,9.7147 39.8519,9.5307 C39.7239,9.3447 39.5469,9.2517 39.3219,9.2517 L38.6139,9.2517 L38.6139,11.3457 Z M40.6189,11.7487 C41.0189,11.8867 41.3239,12.1117 41.5299,12.4237 C41.7379,12.7367 41.8409,13.1257 41.8409,13.5907 C41.8409,14.2377 41.6299,14.7537 41.2079,15.1387 C40.7859,15.5247 40.2229,15.7167 39.5189,15.7167 L37.1749,15.7167 L37.1749,8.1617 L39.4529,8.1617 C40.0559,8.1617 40.5499,8.3477 40.9359,8.7177 C41.3209,9.0877 41.5139,9.5727 41.5139,10.1677 C41.5139,10.5457 41.4379,10.8687 41.2839,11.1387 C41.1319,11.4077 40.9099,11.6117 40.6189,11.7487 L40.6189,11.7487 Z M34.3199,11.8247 C34.3199,10.9667 34.2039,10.3367 33.9749,9.9337 C33.7469,9.5307 33.3889,9.3277 32.9029,9.3277 L32.2699,9.3277 L32.2699,14.5497 L32.9119,14.5497 C33.3839,14.5497 33.7369,14.3447 33.9699,13.9347 C34.2009,13.5237 34.3199,12.8937 34.3199,12.0427 L34.3199,11.8247 Z M35.1589,9.1207 C35.6449,9.7607 35.8879,10.6997 35.8879,11.9337 C35.8879,13.1757 35.6489,14.1187 35.1689,14.7567 C34.6889,15.3967 33.9929,15.7167 33.0759,15.7167 L30.7429,15.7167 L30.7429,8.1617 L33.0219,8.1617 C33.9589,8.1617 34.6709,8.4827 35.1589,9.1207 L35.1589,9.1207 Z M28.0069,13.3947 C27.8469,13.3437 27.6579,13.3187 27.4399,13.3187 C27.2299,13.3187 27.0679,13.3857 26.9549,13.5207 C26.8419,13.6557 26.7849,13.8487 26.7849,14.1027 C26.7849,14.3217 26.8309,14.4937 26.9219,14.6207 C27.0129,14.7477 27.1349,14.8117 27.2869,14.8117 C27.5279,14.8117 27.7669,14.6957 28.0069,14.4627 L28.0069,13.3947 Z M28.0939,15.2147 C27.9699,15.4047 27.7919,15.5587 27.5599,15.6787 C27.3269,15.7987 27.0909,15.8587 26.8509,15.8587 C26.4009,15.8587 26.0439,15.7107 25.7839,15.4167 C25.5219,15.1217 25.3909,14.7177 25.3909,14.2017 C25.3909,13.6567 25.5509,13.2257 25.8699,12.9107 C26.1899,12.5937 26.6219,12.4357 27.1669,12.4357 C27.3929,12.4357 27.6729,12.4787 28.0069,12.5667 L28.0069,12.0647 C28.0069,11.6867 27.9569,11.4307 27.8599,11.2957 C27.7619,11.1617 27.5769,11.0947 27.3099,11.0947 C26.8729,11.0947 26.3389,11.2107 25.7059,11.4437 L25.7059,10.4517 C25.9169,10.3127 26.1939,10.2037 26.5349,10.1237 C26.8769,10.0447 27.2249,10.0047 27.5819,10.0047 C28.2139,10.0047 28.6719,10.1477 28.9549,10.4347 C29.2389,10.7217 29.3799,11.1817 29.3799,11.8137 L29.3799,15.7167 L28.2249,15.7167 L28.0939,15.2147 Z M22.7849,15.7167 L24.2779,15.7167 L24.2779,10.1467 L22.7849,10.1467 L22.7849,15.7167 Z M24.1689,7.8077 C24.0099,7.6597 23.7999,7.5837 23.5369,7.5837 C23.2679,7.5837 23.0539,7.6597 22.8949,7.8077 C22.7359,7.9557 22.6559,8.1587 22.6559,8.4127 C22.6559,8.6677 22.7359,8.8687 22.8949,9.0177 C23.0539,9.1667 23.2679,9.2417 23.5369,9.2417 C23.7999,9.2417 24.0099,9.1667 24.1689,9.0177 C24.3289,8.8687 24.4089,8.6677 24.4089,8.4127 C24.4089,8.1587 24.3289,7.9557 24.1689,7.8077 L24.1689,7.8077 Z M20.3989,10.8657 L20.2349,10.1467 L19.0139,10.1467 L19.0139,15.7167 L20.5069,15.7167 L20.5069,11.6507 C20.8189,11.4767 21.1509,11.3887 21.4979,11.3887 C21.6809,11.3887 21.8729,11.4077 22.0759,11.4437 L22.0759,10.1237 C21.9599,10.1027 21.8439,10.0917 21.7289,10.0917 C21.4889,10.0917 21.2609,10.1537 21.0469,10.2777 C20.8319,10.4007 20.6169,10.5967 20.3989,10.8657 L20.3989,10.8657 Z M16.3759,13.3947 C16.2159,13.3437 16.0279,13.3187 15.8099,13.3187 C15.5979,13.3187 15.4369,13.3857 15.3249,13.5207 C15.2119,13.6557 15.1559,13.8487 15.1559,14.1027 C15.1559,14.3217 15.1999,14.4937 15.2919,14.6207 C15.3819,14.7477 15.5039,14.8117 15.6569,14.8117 C15.8969,14.8117 16.1369,14.6957 16.3759,14.4627 L16.3759,13.3947 Z M16.3759,12.5667 L16.3759,12.0647 C16.3759,11.6867 16.3269,11.4307 16.2289,11.2957 C16.1309,11.1617 15.9479,11.0947 15.6779,11.0947 C15.2429,11.0947 14.7069,11.2107 14.0759,11.4437 L14.0759,10.4517 C14.2859,10.3127 14.5629,10.2037 14.9049,10.1237 C15.2449,10.0447 15.5949,10.0047 15.9509,10.0047 C16.5829,10.0047 17.0409,10.1477 17.3239,10.4347 C17.6089,10.7217 17.7489,11.1817 17.7489,11.8137 L17.7489,15.7167 L16.5939,15.7167 L16.4629,15.2147 C16.3389,15.4047 16.1609,15.5587 15.9289,15.6787 C15.6969,15.7987 15.4599,15.8587 15.2199,15.8587 C14.7699,15.8587 14.4129,15.7107 14.1529,15.4167 C13.8899,15.1217 13.7599,14.7177 13.7599,14.2017 C13.7599,13.6567 13.9189,13.2257 14.2399,12.9107 C14.5599,12.5937 14.9929,12.4357 15.5369,12.4357 C15.7619,12.4357 16.0409,12.4787 16.3759,12.5667 L16.3759,12.5667 Z M12.5819,15.7167 L12.5819,8.1617 L10.8819,8.1617 L9.3239,12.3917 L7.7639,8.1617 L6.0199,8.1617 L6.0199,15.7167 L7.3819,15.7167 L7.3819,10.4517 L8.6469,13.8527 L9.9449,13.8527 L11.2189,10.4187 L11.2189,15.7167 L12.5819,15.7167 Z M43.9709,29.9857 L43.9709,26.4537 C42.2429,27.3977 39.6209,27.8847 37.0119,27.8847 C34.4029,27.8847 31.7809,27.3967 30.0519,26.4537 L30.0519,29.9857 C30.0519,30.6147 32.4199,32.0867 37.0119,32.0867 C41.6039,32.0867 43.9709,30.6147 43.9709,29.9857 L43.9709,29.9857 Z M43.9709,36.0787 L43.9709,32.6567 C42.2429,33.5997 39.6209,34.0867 37.0119,34.0867 C34.4029,34.0867 31.7809,33.5997 30.0519,32.6567 L30.0519,36.0787 C30.0519,36.7067 32.4199,38.1797 37.0119,38.1797 C41.6039,38.1797 43.9709,36.7067 43.9709,36.0787 L43.9709,36.0787 Z M43.9709,41.5197 L43.9709,38.7497 C42.2429,39.6927 39.6209,40.1797 37.0119,40.1797 C34.4029,40.1797 31.7809,39.6927 30.0519,38.7497 L30.0519,41.5197 C30.0519,42.1477 32.4199,43.6197 37.0119,43.6197 C41.6039,43.6197 43.9709,42.1477 43.9709,41.5197 L43.9709,41.5197 Z M30.0519,23.7837 C30.0519,24.4117 32.4199,25.8847 37.0119,25.8847 C41.6039,25.8847 43.9709,24.4117 43.9709,23.7837 C43.9709,23.1557 41.6039,21.6827 37.0119,21.6827 C32.4199,21.6827 30.0519,23.1557 30.0519,23.7837 L30.0519,23.7837 Z M45.9709,23.7837 L45.9709,41.5197 C45.9709,44.2117 41.4639,45.6197 37.0119,45.6197 C32.5599,45.6197 28.0519,44.2117 28.0519,41.5197 L28.0519,23.7837 C28.0519,21.0907 32.5599,19.6827 37.0119,19.6827 C41.4639,19.6827 45.9709,21.0907 45.9709,23.7837 L45.9709,23.7837 Z M7.7509,43.8607 L27.4189,43.8607 L27.4189,45.8607 L7.7509,45.8607 C4.5799,45.8607 1.9999,43.2807 1.9999,40.1097 L1.9999,7.7507 C1.9999,4.5797 4.5799,1.9997 7.7509,1.9997 L40.1099,1.9997 C43.2809,1.9997 45.8609,4.5797 45.8609,7.7507 L45.8609,20.4427 L43.8609,20.4427 L43.8609,7.7507 C43.8609,5.6827 42.1779,3.9997 40.1099,3.9997 L7.7509,3.9997 C5.6829,3.9997 3.9999,5.6827 3.9999,7.7507 L3.9999,40.1097 C3.9999,42.1777 5.6829,43.8607 7.7509,43.8607 L7.7509,43.8607 Z" id="Amazon-DATABASEAmazon-Aurora-MariaDB-instance_Resource-Icon_light-bg" fill="#C925D1"></path>
    </g>

    </svg>
    `;
  }
  if (node?.type === "mySQLInstance") {
    return `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
      <g id="Icon-Resource/Database/Res_Amazon-Aurora-MySQL-Instance_48" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <path d="M43.9636,29.9804 L43.9636,26.4504 C42.2346,27.3924 39.6146,27.8794 37.0056,27.8794 C34.3966,27.8794 31.7756,27.3924 30.0466,26.4504 L30.0466,29.9804 C30.0466,30.6084 32.4136,32.0814 37.0056,32.0814 C41.5966,32.0814 43.9636,30.6084 43.9636,29.9804 L43.9636,29.9804 Z M43.9636,36.0724 L43.9636,32.6514 C42.2346,33.5934 39.6146,34.0814 37.0056,34.0814 C34.3966,34.0814 31.7756,33.5934 30.0466,32.6514 L30.0466,36.0724 C30.0466,36.7004 32.4136,38.1724 37.0056,38.1724 C41.5966,38.1724 43.9636,36.7004 43.9636,36.0724 L43.9636,36.0724 Z M43.9636,41.5114 L43.9636,38.7434 C42.2346,39.6854 39.6146,40.1724 37.0056,40.1724 C34.3966,40.1724 31.7756,39.6854 30.0466,38.7434 L30.0466,41.5114 C30.0466,42.1394 32.4136,43.6124 37.0056,43.6124 C41.5966,43.6124 43.9636,42.1394 43.9636,41.5114 L43.9636,41.5114 Z M30.0466,23.7794 C30.0466,24.4074 32.4136,25.8794 37.0056,25.8794 C41.5966,25.8794 43.9636,24.4074 43.9636,23.7794 C43.9636,23.1514 41.5966,21.6784 37.0056,21.6784 C32.4136,21.6784 30.0466,23.1514 30.0466,23.7794 L30.0466,23.7794 Z M45.9636,23.7794 L45.9636,41.5114 C45.9636,44.2044 41.4566,45.6124 37.0056,45.6124 C32.5536,45.6124 28.0466,44.2044 28.0466,41.5114 L28.0466,23.7794 C28.0466,21.0864 32.5536,19.6784 37.0056,19.6784 C41.4566,19.6784 45.9636,21.0864 45.9636,23.7794 L45.9636,23.7794 Z M3.9996,40.1024 L3.9996,7.7504 C3.9996,5.6824 5.6826,4.0004 7.7496,4.0004 L40.1026,4.0004 C42.1696,4.0004 43.8526,5.6824 43.8526,7.7504 L43.8526,20.4384 L45.8526,20.4384 L45.8526,7.7504 C45.8526,4.5794 43.2736,2.0004 40.1026,2.0004 L7.7496,2.0004 C4.5786,2.0004 1.9996,4.5794 1.9996,7.7504 L1.9996,40.1024 C1.9996,43.2734 4.5786,45.8524 7.7496,45.8524 L27.4136,45.8524 L27.4136,43.8524 L7.7496,43.8524 C5.6826,43.8524 3.9996,42.1694 3.9996,40.1024 L3.9996,40.1024 Z M34.9776,8.3844 L34.9776,16.2404 L39.2396,16.2404 L39.2396,14.9814 L36.5656,14.9814 L36.5656,8.3844 L34.9776,8.3844 Z M32.0086,12.3064 C32.0086,11.3544 31.8836,10.6484 31.6346,10.1874 C31.3856,9.7264 31.0026,9.4964 30.4896,9.4964 C29.9766,9.4964 29.5946,9.7264 29.3446,10.1874 C29.0956,10.6484 28.9716,11.3544 28.9716,12.3064 C28.9716,13.2364 29.0986,13.9394 29.3566,14.4154 C29.6126,14.8914 29.9906,15.1294 30.4896,15.1294 C30.9876,15.1294 31.3656,14.8914 31.6226,14.4154 C31.8796,13.9394 32.0086,13.2364 32.0086,12.3064 L32.0086,12.3064 Z M31.6346,16.2174 C31.8686,16.4064 32.1296,16.5534 32.4166,16.6594 C32.7036,16.7644 33.0556,16.8414 33.4706,16.8864 L33.4706,18.1784 C32.8736,18.0874 32.2986,17.8864 31.7476,17.5784 C31.1956,17.2674 30.7236,16.8784 30.3306,16.4104 C29.3786,16.3724 28.6426,15.9974 28.1206,15.2824 C27.5996,14.5674 27.3376,13.5774 27.3376,12.3064 C27.3376,11.0064 27.6136,10.0004 28.1656,9.2864 C28.7176,8.5724 29.4916,8.2144 30.4896,8.2144 C31.4866,8.2144 32.2616,8.5724 32.8136,9.2864 C33.3646,10.0004 33.6406,11.0064 33.6406,12.3064 C33.6406,13.3194 33.4686,14.1624 33.1246,14.8344 C32.7806,15.5074 32.2836,15.9674 31.6346,16.2174 L31.6346,16.2174 Z M23.6436,15.1394 C23.3936,15.1394 23.0946,15.1044 22.7416,15.0324 C22.3906,14.9604 22.0756,14.8734 21.7956,14.7664 L21.7956,15.9574 C22.0366,16.0924 22.3356,16.2034 22.6916,16.2854 C23.0466,16.3694 23.4016,16.4104 23.7566,16.4104 C24.5716,16.4104 25.2126,16.2014 25.6776,15.7814 C26.1426,15.3614 26.3746,14.7924 26.3746,14.0754 C26.3746,13.7044 26.3186,13.3894 26.2106,13.1284 C26.1016,12.8684 25.9316,12.6314 25.7006,12.4194 C25.4696,12.2094 25.1576,11.9974 24.7656,11.7854 L24.1526,11.4564 C23.8206,11.2764 23.5966,11.1094 23.4796,10.9584 C23.3606,10.8064 23.3036,10.6144 23.3036,10.3794 C23.3036,10.1004 23.3936,9.8804 23.5746,9.7224 C23.7566,9.5634 24.0056,9.4844 24.3236,9.4844 C24.7916,9.4844 25.3316,9.5974 25.9446,9.8244 L25.9446,8.6234 C25.3556,8.3504 24.7616,8.2144 24.1646,8.2144 C23.6886,8.2144 23.2676,8.3074 22.9016,8.4924 C22.5336,8.6774 22.2446,8.9424 22.0326,9.2864 C21.8216,9.6294 21.7166,10.0324 21.7166,10.4934 C21.7166,10.9924 21.8376,11.4154 22.0786,11.7624 C22.3206,12.1104 22.7216,12.4354 23.2796,12.7374 L23.8926,13.0654 C24.2026,13.2324 24.4246,13.3974 24.5556,13.5594 C24.6886,13.7214 24.7546,13.9204 24.7546,14.1544 C24.7546,14.4724 24.6586,14.7154 24.4706,14.8854 C24.2816,15.0554 24.0056,15.1394 23.6436,15.1394 L23.6436,15.1394 Z M17.8166,17.3164 C17.6736,17.4674 17.4566,17.5434 17.1706,17.5434 C17.0116,17.5434 16.8306,17.5284 16.6256,17.4994 L16.6256,18.5414 C16.9666,18.6554 17.2986,18.7104 17.6236,18.7104 C18.0546,18.7104 18.4016,18.5864 18.6656,18.3364 C18.9316,18.0874 19.1436,17.6834 19.3016,17.1244 L21.2176,10.4484 L19.6186,10.4484 L18.7686,14.7094 L17.8966,10.4484 L16.2516,10.4484 L18.1226,16.3534 L18.1006,16.5564 C18.0546,16.9134 17.9606,17.1664 17.8166,17.3164 L17.8166,17.3164 Z M14.0196,16.2404 L14.0196,10.7314 L12.6936,14.3014 L11.3446,14.3014 L10.0286,10.7654 L10.0286,16.2404 L8.6116,16.2404 L8.6116,8.3844 L10.4266,8.3844 L12.0476,12.7834 L13.6676,8.3844 L15.4366,8.3844 L15.4366,16.2404 L14.0196,16.2404 Z" id="Amazon-DATABASEAmazon-Aurora-MySQL-instance_Resource-Icon_light-bg" fill="#C925D1"></path>
    </g>
    </svg>
    `;
  }
  if (node?.type === "postgreSQLInstance") {
    return `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48">
    <g id="Icon-Resource/Database/Res_Amazon-Aurora-PostgreSQL-Instance_48" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <path d="M37.0056,32.082 C32.4146,32.082 30.0476,30.609 30.0476,29.981 L30.0476,26.451 C31.7766,27.394 34.3976,27.881 37.0056,27.881 C39.6146,27.881 42.2346,27.394 43.9636,26.451 L43.9636,29.981 C43.9636,30.609 41.5966,32.082 37.0056,32.082 L37.0056,32.082 Z M37.0056,38.174 C32.4146,38.174 30.0476,36.701 30.0476,36.073 L30.0476,32.652 C31.7766,33.595 34.3976,34.082 37.0056,34.082 C39.6146,34.082 42.2346,33.595 43.9636,32.652 L43.9636,36.073 C43.9636,36.701 41.5966,38.174 37.0056,38.174 L37.0056,38.174 Z M37.0056,43.613 C32.4146,43.613 30.0476,42.141 30.0476,41.513 L30.0476,38.744 C31.7766,39.686 34.3976,40.174 37.0056,40.174 C39.6146,40.174 42.2346,39.686 43.9636,38.744 L43.9636,41.513 C43.9636,42.141 41.5966,43.613 37.0056,43.613 L37.0056,43.613 Z M37.0056,21.68 C41.5966,21.68 43.9636,23.152 43.9636,23.78 C43.9636,24.408 41.5966,25.881 37.0056,25.881 C32.4146,25.881 30.0476,24.408 30.0476,23.78 C30.0476,23.152 32.4146,21.68 37.0056,21.68 L37.0056,21.68 Z M37.0056,19.68 C32.5546,19.68 28.0476,21.088 28.0476,23.78 L28.0476,41.513 C28.0476,44.205 32.5546,45.613 37.0056,45.613 C41.4566,45.613 45.9636,44.205 45.9636,41.513 L45.9636,23.78 C45.9636,21.088 41.4566,19.68 37.0056,19.68 L37.0056,19.68 Z M7.7496,43.853 L27.4136,43.853 L27.4136,45.853 L7.7496,45.853 C4.5786,45.853 1.9996,43.274 1.9996,40.103 L1.9996,7.751 C1.9996,4.58 4.5786,2 7.7496,2 L40.1036,2 C43.2746,2 45.8536,4.58 45.8536,7.751 L45.8536,20.439 L43.8536,20.439 L43.8536,7.751 C43.8536,5.683 42.1706,4 40.1036,4 L7.7496,4 C5.6826,4 3.9996,5.683 3.9996,7.751 L3.9996,40.103 C3.9996,42.171 5.6826,43.853 7.7496,43.853 L7.7496,43.853 Z M40.6286,7.805 L40.6286,13.141 L42.8256,13.141 L42.8256,13.848 L39.7826,13.848 L39.7826,7.805 L40.6286,7.805 Z M36.3296,13.263 C35.8596,13.263 35.5046,13.059 35.2666,12.648 C35.0276,12.238 34.9086,11.633 34.9086,10.83 C34.9086,10.028 35.0276,9.424 35.2666,9.017 C35.5046,8.61 35.8596,8.406 36.3296,8.406 C36.8006,8.406 37.1546,8.61 37.3946,9.017 C37.6316,9.424 37.7506,10.028 37.7506,10.83 C37.7506,11.633 37.6316,12.238 37.3946,12.648 C37.1546,13.059 36.8006,13.263 36.3296,13.263 L36.3296,13.263 Z M38.1956,12.857 C38.4746,12.331 38.6136,11.656 38.6136,10.83 C38.6136,9.836 38.4136,9.064 38.0126,8.515 C37.6116,7.966 37.0506,7.691 36.3296,7.691 C35.6096,7.691 35.0486,7.966 34.6476,8.515 C34.2456,9.064 34.0456,9.836 34.0456,10.83 C34.0456,11.464 34.1286,12.013 34.2936,12.478 C34.4596,12.943 34.7046,13.304 35.0306,13.56 C35.3566,13.815 35.7486,13.954 36.2076,13.978 C36.5396,14.339 36.9016,14.626 37.2976,14.842 C37.6926,15.057 38.1116,15.193 38.5536,15.251 L38.5536,14.51 C38.2506,14.476 37.9756,14.408 37.7256,14.31 C37.4756,14.21 37.2346,14.068 37.0016,13.882 C37.5186,13.725 37.9166,13.384 38.1956,12.857 L38.1956,12.857 Z M32.0966,12.993 C32.2746,12.818 32.3626,12.577 32.3626,12.269 C32.3626,11.851 32.1306,11.522 31.6656,11.284 L31.0456,10.97 C30.6566,10.772 30.3746,10.546 30.1996,10.29 C30.0266,10.034 29.9386,9.72 29.9386,9.348 C29.9386,8.854 30.0926,8.454 30.4016,8.149 C30.7086,7.844 31.1126,7.691 31.6126,7.691 C32.0016,7.691 32.4386,7.796 32.9206,8.005 L32.9206,8.686 C32.5256,8.505 32.1096,8.415 31.6736,8.415 C31.4006,8.415 31.1846,8.495 31.0246,8.654 C30.8636,8.814 30.7846,9.031 30.7846,9.305 C30.7846,9.52 30.8396,9.702 30.9496,9.853 C31.0606,10.005 31.2436,10.147 31.4996,10.281 L32.1176,10.595 C32.4966,10.787 32.7746,11.014 32.9506,11.274 C33.1286,11.537 33.2176,11.851 33.2176,12.217 C33.2176,12.746 33.0516,13.172 32.7206,13.494 C32.3886,13.816 31.9466,13.978 31.3956,13.978 C31.1266,13.978 30.8696,13.947 30.6226,13.887 C30.3756,13.825 30.1626,13.737 29.9826,13.621 L29.9826,12.949 C30.4586,13.153 30.9206,13.254 31.3686,13.254 C31.6766,13.254 31.9196,13.167 32.0966,12.993 L32.0966,12.993 Z M27.0736,10.268 C27.2226,10.044 27.4306,9.932 27.6976,9.932 C27.9366,9.932 28.1126,10.02 28.2296,10.198 C28.3456,10.376 28.4036,10.65 28.4036,11.021 C28.4036,11.062 28.4016,11.103 28.3996,11.145 C28.3966,11.185 28.3956,11.223 28.3956,11.258 L26.8256,11.258 C26.8436,10.821 26.9256,10.492 27.0736,10.268 L27.0736,10.268 Z M29.0496,13.027 C28.6486,13.208 28.2816,13.298 27.9506,13.298 C27.5616,13.298 27.2766,13.182 27.1006,12.949 C26.9226,12.717 26.8316,12.339 26.8256,11.815 L29.0586,11.815 C29.1046,11.595 29.1276,11.353 29.1276,11.092 C29.1276,10.505 29.0096,10.061 28.7746,9.758 C28.5386,9.456 28.1916,9.305 27.7326,9.305 C27.1926,9.305 26.7766,9.505 26.4856,9.906 C26.1946,10.307 26.0496,10.883 26.0496,11.633 C26.0496,12.417 26.1946,13.001 26.4856,13.386 C26.7766,13.769 27.2176,13.961 27.8116,13.961 C28.2816,13.961 28.6936,13.851 29.0496,13.629 L29.0496,13.027 Z M24.7986,9.526 C24.9696,9.436 25.1656,9.392 25.3866,9.392 C25.4806,9.392 25.5726,9.4 25.6656,9.418 L25.6656,10.177 C25.5026,10.153 25.3716,10.142 25.2736,10.142 C24.9426,10.142 24.6406,10.249 24.3666,10.464 L24.3666,13.848 L23.5466,13.848 L23.5466,9.427 L24.2276,9.427 L24.3056,9.958 C24.4626,9.761 24.6266,9.617 24.7986,9.526 L24.7986,9.526 Z M20.8096,13.089 C20.5186,13.089 20.3036,12.962 20.1646,12.709 C20.0256,12.456 19.9546,12.068 19.9546,11.545 C19.9546,11.011 20.0206,10.616 20.1516,10.363 C20.2816,10.11 20.4866,9.984 20.7666,9.984 C21.0266,9.984 21.2946,10.089 21.5676,10.299 L21.5676,12.757 C21.3006,12.978 21.0476,13.089 20.8096,13.089 L20.8096,13.089 Z M21.3416,14.736 C21.1906,14.958 20.9346,15.067 20.5736,15.067 C20.2426,15.067 19.8596,14.978 19.4236,14.798 L19.4236,15.426 C19.7956,15.641 20.2016,15.748 20.6446,15.748 C21.8006,15.748 22.3796,15.03 22.3796,13.595 L22.3796,9.427 L21.6986,9.427 L21.6386,9.784 C21.3006,9.47 20.9486,9.313 20.5826,9.313 C20.1416,9.313 19.7896,9.517 19.5276,9.924 C19.2666,10.33 19.1356,10.88 19.1356,11.571 C19.1356,12.008 19.1926,12.39 19.3056,12.718 C19.4186,13.046 19.5826,13.303 19.7986,13.485 C20.0136,13.668 20.2696,13.76 20.5656,13.76 C20.9136,13.76 21.2486,13.612 21.5676,13.315 L21.5676,13.638 C21.5676,14.149 21.4916,14.516 21.3416,14.736 L21.3416,14.736 Z M16.6936,12.687 L16.6936,10.089 L16.0746,10.089 L16.0746,9.549 L16.7296,9.444 L16.8506,8.188 L17.5136,8.188 L17.5136,9.427 L18.5256,9.427 L18.5256,10.089 L17.5136,10.089 L17.5136,12.627 C17.5136,12.848 17.5496,13.003 17.6226,13.093 C17.6946,13.183 17.8246,13.228 18.0106,13.228 C18.1906,13.228 18.3676,13.199 18.5426,13.141 L18.5426,13.742 C18.2926,13.848 18.0276,13.899 17.7486,13.899 C17.3886,13.899 17.1226,13.801 16.9506,13.603 C16.7796,13.405 16.6936,13.101 16.6936,12.687 L16.6936,12.687 Z M14.8596,13.145 C14.9776,13.032 15.0376,12.87 15.0376,12.661 C15.0376,12.411 14.8776,12.208 14.5576,12.051 L13.9906,11.772 C13.4676,11.517 13.2066,11.115 13.2066,10.569 C13.2066,10.197 13.3286,9.895 13.5716,9.662 C13.8166,9.43 14.1336,9.313 14.5236,9.313 C14.8896,9.313 15.2406,9.406 15.5776,9.593 L15.5776,10.185 C15.2576,10.034 14.9296,9.958 14.5926,9.958 C14.3956,9.958 14.2376,10.011 14.1216,10.115 C14.0056,10.22 13.9476,10.362 13.9476,10.543 C13.9476,10.688 13.9866,10.81 14.0656,10.909 C14.1436,11.008 14.2766,11.103 14.4616,11.196 L14.9936,11.458 C15.2676,11.592 15.4656,11.752 15.5906,11.937 C15.7166,12.124 15.7776,12.353 15.7776,12.627 C15.7776,13.027 15.6536,13.351 15.4036,13.595 C15.1536,13.839 14.8186,13.961 14.4016,13.961 C13.9526,13.961 13.5466,13.853 13.1806,13.638 L13.1806,13.045 C13.6336,13.226 14.0266,13.315 14.3576,13.315 C14.5716,13.315 14.7386,13.259 14.8596,13.145 L14.8596,13.145 Z M11.4806,12.893 C11.3346,13.163 11.1106,13.298 10.8086,13.298 C10.5066,13.298 10.2816,13.163 10.1376,12.893 C9.9916,12.622 9.9186,12.202 9.9186,11.633 C9.9186,11.062 9.9916,10.645 10.1376,10.377 C10.2816,10.109 10.5066,9.976 10.8086,9.976 C11.1106,9.976 11.3346,10.109 11.4806,10.377 C11.6246,10.645 11.6976,11.062 11.6976,11.633 C11.6976,12.202 11.6246,12.622 11.4806,12.893 L11.4806,12.893 Z M10.8086,9.313 C10.2566,9.313 9.8336,9.514 9.5396,9.915 C9.2466,10.316 9.0996,10.889 9.0996,11.633 C9.0996,12.382 9.2466,12.958 9.5396,13.358 C9.8336,13.76 10.2566,13.961 10.8086,13.961 C11.3606,13.961 11.7836,13.76 12.0766,13.358 C12.3706,12.958 12.5176,12.382 12.5176,11.633 C12.5176,10.889 12.3706,10.316 12.0766,9.915 C11.7836,9.514 11.3606,9.313 10.8086,9.313 L10.8086,9.313 Z M7.3516,10.517 C7.1966,10.726 6.9836,10.83 6.7106,10.83 L5.8476,10.83 L5.8476,8.476 L6.7106,8.476 C6.9836,8.476 7.1966,8.579 7.3516,8.785 C7.5056,8.992 7.5826,9.281 7.5826,9.653 C7.5826,10.02 7.5056,10.307 7.3516,10.517 L7.3516,10.517 Z M7.6566,8.04 C7.4086,7.884 7.1226,7.805 6.7976,7.805 L5.0276,7.805 L5.0276,13.848 L5.8476,13.848 L5.8476,11.502 L6.7976,11.502 C7.2796,11.502 7.6706,11.333 7.9706,10.996 C8.2696,10.659 8.4196,10.211 8.4196,9.653 C8.4196,9.293 8.3546,8.974 8.2236,8.694 C8.0926,8.415 7.9036,8.197 7.6566,8.04 L7.6566,8.04 Z" id="Amazon-DATABASEAmazon-Aurora-PostgreSQL-instance_Resource-Icon_light-bg" fill="#C925D1"></path>
    </g>
    </svg>
    `;
  }
  // Padrão: busca svg customizado ou retorna undefined
  return node?.data?.iconSvg || node?.data?.svg || undefined;
}

// Cria textura de SVG como dataURL
function useSVGTexture(svg?: string) {
  return useMemo(() => {
    if (!svg) return undefined;
    const svg64 = btoa(unescape(encodeURIComponent(svg)));
    const image64 = `data:image/svg+xml;base64,${svg64}`;
    const texture = new THREE.TextureLoader().load(image64);
    texture.needsUpdate = true;
    return texture;
  }, [svg]);
}

// Componente para renderizar SVG como textura em plano 3D
function SVGPlane({ svg, size = 1.2, position = [0, 1.1, 0], rotation = [0, 0, 0] }) {
  const texture = useSVGTexture(svg);
  if (!svg || !texture) return null;
  return (
    <mesh position={position} rotation={rotation}>
      <planeGeometry args={[size, size]} />
      <meshBasicMaterial map={texture} transparent />
    </mesh>
  );
}


function NodeMesh({ node, pos, selected, onSelect, faded }) {
  const svg = getNodeSVG(node);
  const width = 32;
  const height = 6;
  const depth = 32;

  let geometry, meshProps = {};

  if (node.type === "lambdaFunction") {
    geometry = <boxGeometry args={[width, height, depth]} />;
  } else {
    switch (node.type) {
      case "circle":
        geometry = <sphereGeometry args={[width / 2, 32, 32]} />;
        meshProps = { scale: [1, height / width, 1] };
        break;
      case "diamond":
        geometry = <octahedronGeometry args={[width / 2, 0]} />;
        meshProps = { scale: [1, height / width, 1] };
        break;
      case "triangle":
        geometry = <coneGeometry args={[width / 2, height, 3]} />;
        break;
      case "hex":
        geometry = <cylinderGeometry args={[width / 2, width / 2, height, 6]} />;
        break;
      default:
        geometry = <boxGeometry args={[width, height, depth]} />;
    }
  }

  // Para o cubo da lambda ficar acima do plano do andar, eleva o y em height/2
  const adjustedPos = node.type === "lambdaFunction"
    ? [pos[0], pos[1] + height / 2 + 0.1, pos[2]]
    : pos;

  return (
    <group position={adjustedPos}>
      <mesh
        onClick={() => onSelect(node)}
        castShadow
        visible={!faded}
        {...meshProps}
      >
        {geometry}
        <meshStandardMaterial
          color={"#fff" }
          opacity={1}
          transparent={false}
        />
      </mesh>
      {/* Todos os nodes: SVG plano na parte superior do cubo, paralelo ao chão */}
      {svg && !faded && (
        <SVGPlane
          svg={svg}
          size={Math.min(width, depth) * 0.8}
          position={[0, height / 2 + 0.1, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      )}
      <Html center distanceFactor={8} occlude={false}>
        <div style={{
          background: "#fff",
          padding: 4,
          borderRadius: 4,
          fontSize: 14,
          boxShadow: "0 1px 4px #0002",
          opacity: faded ? 0.2 : 1,
          minWidth: 80,
          textAlign: "center",
          fontWeight: 600,
          pointerEvents: "none",
          userSelect: "none"
        }}>
          {node.data?.label || node.type}
        </div>
      </Html>
    </group>
  );
}

function Floor({
  y,
  nodes,
  edges,
  filteredNodeIds,
  onSelectNode,
  selectedNodeId,
}) {
  // Calcula o centro e limites do fluxo para centralizar e dimensionar a base
  const { centerX, centerY, minX, maxX, minY, maxY } = useMemo(() => {
    if (!nodes.length) return { centerX: 0, centerY: 0, minX: -20, maxX: 20, minY: -15, maxY: 15 };
    const xs = nodes.map(n => n.position?.x ?? 0);
    const ys = nodes.map(n => n.position?.y ?? 0);
    const minX = Math.min(...xs);
    const maxX = Math.max(...xs);
    const minY = Math.min(...ys);
    const maxY = Math.max(...ys);
    return {
      centerX: (minX + maxX) / 2,
      centerY: (minY + maxY) / 2,
      minX,
      maxX,
      minY,
      maxY,
    };
  }, [nodes]);

  // Calcula o tamanho da base com margem
  const margin = 64;
  const floorWidth = Math.max(10, maxX - minX + margin);
  const floorDepth = Math.max(10, maxY - minY + margin);

  // Centraliza os nodes em relação ao centro do fluxo
  const nodePositions = useMemo(() => {
    return Object.fromEntries(
      nodes.map(n => [
        n.id,
        [
          (n.position?.x ?? 0) - centerX,
          (n.size?.height ?? 60) / 40, // altura proporcional ao fluxo (ex: 60px vira 1.5)
          (n.position?.y ?? 0) - centerY,
        ],
      ])
    );
  }, [nodes, centerX, centerY]);

  const safeEdges = Array.isArray(edges) ? edges : [];

  return (
    <group position={[0, y, 0]}>
      {/* Base do andar ajustada ao limite dos nodes */}
      <mesh position={[0, 0, 0]}>
        <boxGeometry args={[floorWidth, 0.2, floorDepth]} />
        <meshStandardMaterial color="#888" transparent opacity={0.18} />
      </mesh>
      {/* Edges */}
      {safeEdges.map(edge => {
        const src = nodePositions[edge.source];
        const tgt = nodePositions[edge.target];
        if (!src || !tgt) return null;
        const points = [
          new THREE.Vector3(src[0], src[1], src[2]),
          new THREE.Vector3(tgt[0], tgt[1], tgt[2]),
        ];
        return (
          <line key={edge.id}>
            <bufferGeometry attach="geometry" />
            <lineBasicMaterial color="#444" linewidth={2} />
            <primitive
              object={new THREE.BufferGeometry().setFromPoints(points)}
              attach="geometry"
            />
          </line>
        );
      })}
      {/* Nodes */}
      {nodes.map(node => {
        const pos = nodePositions[node.id] || [0, 1, 0];
        const isFiltered = filteredNodeIds.includes(node.id);
        // Tamanhos proporcionais ao fluxo (largura e altura)
        const width = (node.size?.width ?? 120) / 40;   // ex: 120px vira 3
        const height = (node.size?.height ?? 60) / 40;  // ex: 60px vira 1.5
        return (
          <NodeMesh
            key={node.id}
            node={node}
            pos={pos}
            selected={selectedNodeId === node.id}
            onSelect={onSelectNode}
            faded={!isFiltered && filteredNodeIds.length > 0}
            width={width}
            height={height}
          />
        );
      })}
    </group>
  );
}

export default function Project3DMap({ tabs, onBack }) {
  const [search, setSearch] = useState("");
  const [typeFilter, setTypeFilter] = useState("");
  const [selectedNode, setSelectedNode] = useState(null);

  const allTypes = useMemo(
    () =>
      Array.from(
        new Set(tabs.flatMap(tab => tab.nodes.map(node => node.type)))
      ),
    [tabs]
  );

  // Calcula os ids dos nodes filtrados por aba
  const filteredNodeIdsByTab = useMemo(() => {
    const map: Record<string, string[]> = {};
    tabs.forEach(tab => {
      map[tab.id] = tab.nodes
        .filter(
          node =>
            (!typeFilter || node.type === typeFilter) &&
            (!search ||
              (node.data?.label || "")
                .toLowerCase()
                .includes(search.toLowerCase()))
        )
        .map(node => node.id);
    });
    return map;
  }, [tabs, typeFilter, search]);

  // Novo: nodes e edges sempre são todos renderizados, mas só os filtrados ficam destacados
  function getFiltered(tab) {
    const filteredIds = filteredNodeIdsByTab[tab.id] || [];
    return {
      nodes: tab.nodes,
      edges: tab.edges,
      filteredNodeIds: filteredIds
    };
  }

  return (
    <div style={{ display: "flex", height: "100vh", background: "#fff" }}>
      {/* Painel lateral restaurado */}
      <div style={{
        width: 320,
        padding: 24,
        borderRight: "1px solid #e5e7eb",
        background: "#fff",
        boxSizing: "border-box"
      }}>
        <div style={{ marginBottom: 16 }}>
          {onBack && (
            <button
              onClick={onBack}
              style={{
                padding: "6px 18px",
                borderRadius: 4,
                border: "1px solid #bbb",
                background: "#fff",
                fontWeight: 500,
                cursor: "pointer"
              }}
            >
              Voltar para Fluxo
            </button>
          )}
        </div>
        <h2 style={{ marginTop: 0 }}>Mapa 3D do Projeto</h2>
        <input
          type="text"
          placeholder="Buscar por nome..."
          value={search}
          onChange={e => setSearch(e.target.value)}
          style={{ width: "100%", marginBottom: 12, padding: 6, borderRadius: 4, border: "1px solid #ddd" }}
        />
        <select
          value={typeFilter}
          onChange={e => setTypeFilter(e.target.value)}
          style={{ width: "100%", marginBottom: 12, padding: 6, borderRadius: 4, border: "1px solid #ddd" }}
        >
          <option value="">Todos os tipos</option>
          {allTypes.map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
        {selectedNode && (
          <div style={{ marginTop: 24 }}>
            <h4>Propriedades</h4>
            <pre style={{ fontSize: 12, background: "#f3f4f6", padding: 8, borderRadius: 4 }}>
              {JSON.stringify(selectedNode.data?.Properties || selectedNode.data, null, 2)}
            </pre>
          </div>
        )}
        <div style={{ marginTop: 32, fontSize: 12, color: "#888" }}>
          <b>Dica:</b> Clique em um recurso para ver detalhes.<br />
          Cada andar representa uma aba do projeto.
        </div>
      </div>
      <div style={{ flex: 1, background: "#fff" }}>
        <Canvas
          camera={{ position: [0, 10, 20], fov: 100 }}
          style={{ background: "#fff" }}
          gl={{ preserveDrawingBuffer: true, alpha: false }}
        >
          <color attach="background" args={["#fff"]} />
          <ambientLight intensity={0.7} />
          <directionalLight position={[10, 20, 10]} intensity={0.5} />
          <OrbitControls />
          {tabs.map((tab, idx) => {
            const { nodes, edges, filteredNodeIds } = getFiltered(tab);
            return (
              <Floor
                key={tab.id}
                y={idx * 32}
                nodes={nodes}
                edges={Array.isArray(edges) ? edges : []}
                onSelectNode={setSelectedNode}
                selectedNodeId={selectedNode?.id}
                filteredNodeIds={filteredNodeIds}
              />
            );
          })}
        </Canvas>
      </div>
    </div>
  );
}